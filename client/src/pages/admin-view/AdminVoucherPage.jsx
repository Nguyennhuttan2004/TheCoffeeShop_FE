import React, { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { toast } from "@/hooks/use-toast";
import {
  fetchVouchers,
  createVoucher,
  updateVoucher,
  deleteVoucher,
} from "/store/admin/voucher-slice";
import { useForm } from "react-hook-form";
import { yupResolver } from "@hookform/resolvers/yup";
import * as yup from "yup";

const schema = yup.object().shape({
  code: yup.string().required("M√£ voucher kh√¥ng ƒë∆∞·ª£c b·ªè tr·ªëng"),
  type: yup.string().oneOf(["percent", "fixed"]).required("Vui l√≤ng ch·ªçn lo·∫°i"),
  value: yup
    .number()
    .typeError("Gi√° tr·ªã ph·∫£i l√† s·ªë")
    .min(1, "Gi√° tr·ªã t·ªëi thi·ªÉu l√† 1")
    .required("Gi√° tr·ªã gi·∫£m gi√° l√† b·∫Øt bu·ªôc"),
  minOrderAmount: yup
    .number()
    .typeError("T·ªëi thi·ªÉu ƒë∆°n h√†ng ph·∫£i l√† s·ªë")
    .min(0, "Kh√¥ng ƒë∆∞·ª£c √¢m")
    .required("T·ªëi thi·ªÉu ƒë∆°n h√†ng l√† b·∫Øt bu·ªôc"),
  maxDiscount: yup
    .number()
    .typeError("Gi·∫£m t·ªëi ƒëa ph·∫£i l√† s·ªë")
    .when("type", {
      is: "percent",
      then: (schema) => schema.required("B·∫Øt bu·ªôc khi gi·∫£m theo %"),
      otherwise: (schema) => schema.strip(true),
    }),
  expiredAt: yup
    .date()
    .nullable()
    .min(new Date(), "Kh√¥ng th·ªÉ ch·ªçn ng√†y trong qu√° kh·ª©")
    .required("Vui l√≤ng ch·ªçn ng√†y h·∫øt h·∫°n"),
  isActive: yup.boolean(),
});

const AdminVoucherPage = () => {
  const dispatch = useDispatch();
  const { vouchers } = useSelector((state) => state.adminVoucher);
  const [editingId, setEditingId] = useState(null);

  const {
    register,
    handleSubmit,
    reset,
    watch,
    formState: { errors },
  } = useForm({ resolver: yupResolver(schema) });

  const type = watch("type");

  useEffect(() => {
    dispatch(fetchVouchers());
  }, [dispatch]);

  const onSubmit = async (data) => {
    try {
      if (editingId) {
        await dispatch(updateVoucher({ id: editingId, data }));
        toast({ title: "üéâ C·∫≠p nh·∫≠t voucher th√†nh c√¥ng!" });
      } else {
        await dispatch(createVoucher(data));
        toast({ title: "üéâ T·∫°o voucher m·ªõi th√†nh c√¥ng!" });
      }
      reset();
      setEditingId(null);
    } catch {
      toast({ title: "‚ùå L·ªói khi l∆∞u voucher!", variant: "destructive" });
    }
  };

  const handleEdit = (v) => {
    reset({
      ...v,
      expiredAt: v.expiredAt
        ? new Date(v.expiredAt).toISOString().slice(0, 10)
        : "",
    });
    setEditingId(v._id);
  };

  const handleDelete = async (id) => {
    if (!window.confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën xo√°?")) return;
    try {
      await dispatch(deleteVoucher(id));
      toast({ title: "üóëÔ∏è Xo√° voucher th√†nh c√¥ng!" });
    } catch {
      toast({ title: "‚ùå L·ªói khi xo√°!", variant: "destructive" });
    }
  };

  return (
    <div className="p-8 max-w-6xl mx-auto">
      <h1 className="text-3xl font-bold mb-6">üéüÔ∏è Qu·∫£n l√Ω Voucher</h1>

      {/* Form t·∫°o/s·ª≠a voucher */}
      <div className="bg-white p-6 rounded-xl shadow mb-10 space-y-4">
        <p className="text-gray-600 text-sm mb-2 font-semibold">
          üìù <strong>H∆∞·ªõng d·∫´n:</strong> Nh·∫≠p m√£ voucher (v√≠ d·ª•:{" "}
          <code>GIAM10</code>), ch·ªçn lo·∫°i gi·∫£m gi√°, thi·∫øt l·∫≠p gi√° tr·ªã, ƒëi·ªÅu ki·ªán
          t·ªëi thi·ªÉu ƒë∆°n h√†ng, h·∫°n s·ª≠ d·ª•ng v√† b·∫≠t/t·∫Øt tr·∫°ng th√°i ho·∫°t ƒë·ªông.
        </p>
        <form onSubmit={handleSubmit(onSubmit)}>
          <div className="grid grid-cols-2 gap-4">
            <Input
              placeholder="M√£ voucher (v√≠ d·ª•: GIAM10)"
              {...register("code")}
            />
            {errors.code && (
              <p className="text-red-500 text-sm col-span-2">
                {errors.code.message}
              </p>
            )}

            {/* **Lo·∫°i gi·∫£m gi√°: ph·∫ßn trƒÉm ho·∫∑c s·ªë ti·ªÅn c·ªë ƒë·ªãnh** */}
            <select className="border p-2 rounded" {...register("type")}>
              <option value="" disabled hidden>
                -- Vui l√≤ng ch·ªçn lo·∫°i gi·∫£m gi√° --
              </option>
              <option value="percent">Gi·∫£m theo %</option>
              <option value="fixed">Gi·∫£m c·ªë ƒë·ªãnh (VNƒê)</option>
            </select>

            {/* **Gi√° tr·ªã: 10 nghƒ©a l√† 10% ho·∫∑c 10000 VNƒê tu·ª≥ theo lo·∫°i** */}
            <div className="col-span-2">
              <Input
                type="number"
                placeholder="Gi√° tr·ªã gi·∫£m (VD: 10 ho·∫∑c 10000)"
                {...register("value")}
              />
              <p className="text-xs text-gray-500 mt-1 ml-1 font-semibold">
                N·∫øu l√† gi·∫£m theo %, nh·∫≠p s·ªë nh∆∞ 10 (t·ª©c gi·∫£m 10%). N·∫øu l√† gi·∫£m
                c·ªë ƒë·ªãnh, nh·∫≠p s·ªë ti·ªÅn nh∆∞ 10000‚Ç´.
              </p>
              {errors.value && (
                <p className="text-red-500 text-sm">{errors.value.message}</p>
              )}
            </div>

            {/* **ƒêi·ªÅu ki·ªán √°p d·ª•ng: ƒë∆°n h√†ng t·ªëi thi·ªÉu** */}
            <div className="col-span-2">
              <Input
                type="number"
                placeholder="T·ªëi thi·ªÉu ƒë∆°n h√†ng (VD: 100000)"
                {...register("minOrderAmount")}
              />
              <p className="text-xs text-gray-500 mt-1 ml-1 font-semibold">
                ƒê√¢y l√† s·ªë ti·ªÅn t·ªëi thi·ªÉu m√† ƒë∆°n h√†ng c·∫ßn ƒë·∫°t ƒë·ªÉ √°p d·ª•ng voucher
                n√†y. V√≠ d·ª•: 100000‚Ç´.
              </p>
              {errors.minOrderAmount && (
                <p className="text-red-500 text-sm">
                  {errors.minOrderAmount.message}
                </p>
              )}
            </div>

            {/* **Gi·∫£m t·ªëi ƒëa: ch·ªâ hi·ªÉn th·ªã n·∫øu ch·ªçn lo·∫°i ph·∫ßn trƒÉm** */}
            <div className="col-span-2">
              <Input
                type="number"
                placeholder="Gi·∫£m t·ªëi ƒëa (ch·ªâ d√πng v·ªõi %)"
                {...register("maxDiscount")}
                disabled={type !== "percent"}
              />
              <p className="text-xs text-gray-500 mt-1 ml-1 font-semibold">
                S·ªë ti·ªÅn t·ªëi ƒëa ƒë∆∞·ª£c gi·∫£m khi √°p d·ª•ng ph·∫ßn trƒÉm. Tr∆∞·ªùng n√†y s·∫Ω b·ªã
                kho√° n·∫øu ch·ªçn gi·∫£m c·ªë ƒë·ªãnh.
              </p>
              {errors.maxDiscount && (
                <p className="text-red-500 text-sm">
                  {errors.maxDiscount.message}
                </p>
              )}
            </div>

            {/* **Ng√†y h·∫øt h·∫°n c·ªßa voucher** */}
            <Input
              type="date"
              {...register("expiredAt")}
              min={new Date().toISOString().split("T")[0]} // Gi·ªõi h·∫°n ng√†y t·ªëi thi·ªÉu l√† h√¥m nay
            />

            {/* **Tr·∫°ng th√°i: ƒëang ho·∫°t ƒë·ªông hay kh√¥ng** */}
            <label className="flex items-center gap-2 col-span-2 mt-2 font-semibold">
              <input type="checkbox" {...register("isActive")} /> ƒêang ho·∫°t ƒë·ªông
              (B·ªè ch·ªçn ƒë·ªÉ t·∫°m d·ª´ng m√£)
            </label>
          </div>
          <Button type="submit" className="mt-4 ">
            {editingId ? "C·∫≠p nh·∫≠t voucher" : "T·∫°o m·ªõi voucher"}
          </Button>
        </form>
      </div>

      {/* Danh s√°ch voucher */}
      <div className="bg-white rounded-xl shadow p-6">
        <h2 className="text-xl font-semibold mb-4">üìÉ Danh s√°ch Voucher</h2>
        <div className="overflow-auto">
          <table className="w-full text-sm text-left">
            <thead>
              <tr className="border-b font-semibold">
                <th>M√£</th>
                <th>Lo·∫°i</th>
                <th>Gi√° tr·ªã</th>
                <th>Min Order</th>
                <th>H·∫°n</th>
                <th>Tr·∫°ng th√°i</th>
                <th>Thao t√°c</th>
              </tr>
            </thead>
            <tbody>
              {vouchers.map((v) => (
                <tr key={v._id} className="border-b">
                  <td>{v.code}</td>
                  <td>{v.type}</td>
                  <td>
                    {v.type === "percent"
                      ? `${v.value}% (max ${v.maxDiscount.toLocaleString()}‚Ç´)`
                      : `${v.value.toLocaleString()}‚Ç´`}
                  </td>
                  <td>{v.minOrderAmount.toLocaleString()}‚Ç´</td>
                  <td>
                    {v.expiredAt
                      ? new Date(v.expiredAt).toLocaleDateString()
                      : "Kh√¥ng"}
                  </td>
                  <td
                    className={v.isActive ? "text-green-600" : "text-red-500"}
                  >
                    {v.isActive ? "Ho·∫°t ƒë·ªông" : "T·∫Øt"}
                  </td>
                  <td className="space-x-2  ">
                    <Button className="bg-blue-500 hover:bg-blue-600" size="sm" onClick={() => handleEdit(v)}>
                      S·ª≠a
                    </Button>
                    <Button
                      size="sm"
                      variant="destructive"
                      onClick={() => handleDelete(v._id)}
                    >
                      Xo√°
                    </Button>
                  </td>
                </tr>
              ))}
              {!vouchers.length && (
                <tr>
                  <td colSpan="7" className="text-center py-4">
                    Kh√¥ng c√≥ voucher n√†o.
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
};

export default AdminVoucherPage;
